#!/usr/bin/perl
#
# Author : Alexi Langlade
# Inspired by Rodolphe Quiedeville(2006) & Andreas Buer(2004)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# Parameters:
#
#   config
#   autoconf
#
# Configuration variables
#
#   mysqlopts     - Options to pass to mysql
#   mysqladmin    - Override location of mysqladmin
#
#%# family=auto
#%# capabilities=autoconf

use strict;

my $MYSQLADMIN = $ENV{mysqladmin} || "mysqladmin";
my $COMMAND    = "$MYSQLADMIN $ENV{mysqlopts} extended-status";
my $COMMANDSIZE = "$MYSQLADMIN $ENV{mysqlopts} variables";

my %WANTED = ( "thread_cache_size" => "Thread Cache Size",
            "Threads_connected" => "Threads Connecteds",
            "Threads_running" => "Threads Running",
            "Threads_created" => "Threads Created",
            "Threads_cached" => "Threads Cached");

my %WANTEDDRAW = ("thread_cache_size" => "AREA",
                "Threads_connected" => "LINE1",
                "Threads_running" => "LINE1",
                "Threads_created" => "LINE1",
                "Threads_cached" => "LINE1");

my $arg = shift();

if ($arg eq 'config') {
	print_config();
	exit();
} elsif ($arg eq 'autoconf') {
	unless (test_service() ) {
		print "yes\n";
	} else {
		print "no\n";
	}
	exit;
}

open(SERVICE, "$COMMAND |")
	or die("Could not execute '$COMMAND': $!");

while(<SERVICE>) {
	my ($k, $v) = (m/(\w+).*?(\d+(?:\.\d+)?)/);
	next unless($k); 	
	if(exists $WANTED{$k}) {
		print("$k.value $v\n");
		delete $WANTED{$k};
	}
}

close(SERVICE);

open (SERVICE, "$COMMANDSIZE |")
	or die("Could not execute '$COMMANDSIZE': $!");

while(<SERVICE>) {
	my ($k, $v) = (m/(\w+).*?(\d+(?:\.\d+)?)/);
	next unless($k);
	if(exists $WANTED{$k}) {
		print ("$k.value $v\n");
	}
}

close(SERVICE);

sub print_config {

    print('graph_title MySQL Threads
graph_args --base 1000
graph_vlabel threads
graph_category mysql
graph_info The MySQL Threads graph shows the size of thread cache the server is configured with and the number of threads of each type. On this example we can observe that once thread_cache_size was set to 10, MySQL stopped creating new threads and started using the cached ones.
');

    for my $key (keys %WANTED) {
        print("$key.label $WANTED{$key}\n",
              "$key.min 0\n",
              "$key.type DERIVE\n",
              "$key.max 100000000\n",
              "$key.draw ".$WANTEDDRAW{$key}."\n",
             );
    }
}


sub test_service {

    my $return = 1;

    system ("$MYSQLADMIN --version >/dev/null 2>/dev/null");
    if ($? == 0)
    {
		system ("$COMMAND >/dev/null 2>/dev/null");
		if ($? == 0)
		{
		    print "yes\n";
		    $return = 0;
		}
		else
		{
		    print "no (could not connect to mysql)\n";
		}
    }
    else
    {
		print "no (mysqladmin not found)\n";
    }
    exit $return;
}